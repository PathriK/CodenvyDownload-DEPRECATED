package in .pathri.codenvydownload;


import okhttp3.ResponseBody;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.view.Menu;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;

import retrofit2.Call;
import retrofit2.Callback;

import retrofit2.Response;
import retrofit2.Retrofit;
import retrofit2.http.*;

import in .pathri.codenvydownload.CodenvyResponse;
import in .pathri.codenvydownload.ResourceLinks;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

// import org.json.*;

// import java.io.PrintWriter;
// import java.io.StringWriter;
// import java.util.Arrays;

// import com.loopj.android.http.*;
// import cz.msebera.android.httpclient.Header;

public class HomePageActivity extends Activity {

 public static final Integer SUCCESS_CODE = 200;
 static TextView loginStatus, buildStatus, statusMsg;
 private static Handler statusHandler;
 private static Context context;

 @Override
 protected void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_main);
  loginStatus = (TextView) findViewById(R.id.login_status);
  buildStatus = (TextView) findViewById(R.id.build_status);
  statusMsg = (TextView) findViewById(R.id.status_msg);
  CodenvyClient.apiInit();
  statusMsg.setText("Initialised");
  statusHandler = new Handler();
  context = getApplicationContext();
 }

 private static void updateStatusText(String text) {
  String temp = statusMsg.getText().toString();
  statusMsg.setText(temp + text);
 }


 private static void installAPK(String fileRelPath) {
  Intent promptInstall = new Intent(Intent.ACTION_VIEW);
  promptInstall.setDataAndType(Uri.fromFile(new File(Environment.getExternalStorageDirectory() + fileRelPath)), "application/vnd.android.package-archive");
  promptInstall.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  context.startActivity(promptInstall);
 }

 private static class apkDownloadHandler implements Callback < ResponseBody > {
  String buildId;
  apkDownloadHandler(String buildId) {
   this.buildId = buildId;
  }

  @Override
  public void onFailure(Call < ResponseBody > arg0, Throwable arg1) {
   updateStatusText("Connection Error");
  }

  @Override
  public void onResponse(Call < ResponseBody > request, Response < ResponseBody > response) {
   updateStatusText(String.valueOf(response.code()));
   if (response.isSuccessful()) {
    String fileName = "CodenvyDownload-" + buildId + ".apk";
    try {
     File path = Environment.getExternalStorageDirectory();
     File file = new File(path, fileName);
     FileOutputStream fileOutputStream = new FileOutputStream(file);
     IOUtils.write(response.body().bytes(), fileOutputStream);

    } catch (IOException e) {
     updateStatusText("Error while writing file!");
     updateStatusText(e.toString());
    }
   }

  }

  private static class statusResponseHandler implements Callback < CodenvyResponse > {
   @Override
   public void onFailure(Call < CodenvyResponse > arg0, Throwable arg1) {
    updateStatusText("Connection Error");
   }

   @Override
   public void onResponse(Call < CodenvyResponse > request, Response < CodenvyResponse > response) {
    updateStatusText(String.valueOf(response.code()));
    if (response.isSuccessful()) {
     final CodenvyResponse k = response.body();
     if (k == null) {
      updateStatusText("response success - parsing null");
     } else {
      if ("IN_QUEUE".equals(k.status) || "IN_PROGRESS".equals(k.status)) {
       updateStatusText("Build Status" + k.status);
       //                 Thread.sleep(10000);
       //               	 CodenvyClient.buildStatus("workspacevcpucno8mrpb6h0p",k.taskId,new statusResponseHandler());
       statusHandler.postDelayed(new Runnable() {
        @Override
        public void run() {
         CodenvyClient.buildStatus("workspacevcpucno8mrpb6h0p", k.taskId, new statusResponseHandler());
        }
       }, 5000);
      } else if ("FAILED".equals(k.status)) {
       updateStatusText("Build Status Failed" + k.status);
      } else if ("SUCCESSFUL".equals(k.status)) {
       updateStatusText("Build Status Success" + k.status);

       List < ResourceLinks > linksList = k.links;
       Iterator < ResourceLinks > iterator = linksList.iterator();
       while (iterator.hasNext()) {
        ResourceLinks resourceLink = iterator.next();
        //   updateStatusText("URL HREF : " + resourceLink.href);
        //   updateStatusText("URL REL : " + resourceLink.rel);
        if ("download result".equals(resourceLink.rel)) {
         String downloadURL = resourceLink.href;
         CodenvyClient.getAPK(downloadURL, new apkDownloadHandler(k.taskId));
         break;
        }
       }

      } else {
       updateStatusText("Build Status Unknown" + k.status);
      }
      //           CodenvyClient.buildProj("workspacevcpucno8mrpb6h0p","CodenvyDownload",new buildResponseHandler());
     }


    } else {
     ResponseBody k = response.errorBody();
     if (k == null) {
      updateStatusText("response error parsing null");
     }
     try {
      updateStatusText(k.string());
     } catch (Exception e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
     }
    }


   }

  }

  private static class LoginResponseHandler implements Callback < CodenvyResponse > {
   @Override
   public void onFailure(Call < CodenvyResponse > arg0, Throwable arg1) {
    updateStatusText("Connection Error");
   }

   @Override
   public void onResponse(Call < CodenvyResponse > request, Response < CodenvyResponse > response) {
    updateStatusText(String.valueOf(response.code()));
    if (response.isSuccessful()) {
     CodenvyResponse k = response.body();
     if (k == null) {
      updateStatusText("response success parsing null");
     } else {
      updateStatusText(k.value);
      CodenvyClient.buildProj("workspacevcpucno8mrpb6h0p", "CodenvyDownload", new buildResponseHandler());
     }


    } else {
     ResponseBody k = response.errorBody();
     if (k == null) {
      updateStatusText("response error parsing null");
     }
     try {
      updateStatusText(k.string());
     } catch (Exception e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
     }
    }


   }

  }

  private static class buildResponseHandler implements Callback < CodenvyResponse > {
   @Override
   public void onFailure(Call < CodenvyResponse > arg0, Throwable arg1) {
    updateStatusText("Connection Error");
   }

   @Override
   public void onResponse(Call < CodenvyResponse > arg0, Response < CodenvyResponse > response) {
    updateStatusText(String.valueOf(response.code()));

    if (response.isSuccessful()) {
     CodenvyResponse k = response.body();
     if (k == null) {
      updateStatusText("response success parsing null");
     } else {
      //           updateStatusText("Yet to get taskId");
      updateStatusText("TaskID:" + k.taskId);
      CodenvyClient.buildStatus("workspacevcpucno8mrpb6h0p", k.taskId, new statusResponseHandler());
     }


    } else {
     ResponseBody k = response.errorBody();
     if (k == null) {
      updateStatusText("response error parsing null");
     }
     try {
      updateStatusText(k.string());
     } catch (Exception e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
     }
    }


   }

  }
  //     private class LoginResponseHandler<HttpBinResponse> implements Callback<HttpBinResponse> {
  //             /**
  //              * onResponse is called when any kind of response has been received.
  //              */
  //             @Override
  //             public void onResponse(Response<HttpBinResponse> response, Retrofit retrofit) {
  //                 // http response status code + headers
  // //                 System.out.println("Response status code: " + response.code());
  // 					updateStatusText("OnResponse" + response.code());

  //                 // isSuccess is true if response code => 200 and <= 300
  //                 if (!response.isSuccess()) {
  //                     // print response body if unsuccessful
  // //                     try {
  // //                         System.out.println(response.errorBody().string());

  //        updateStatusText("OnErrorResponse" + response.errorBody().string());


  // //                     } catch (IOException e) {

  // //                     }
  //                     return;
  //                 }

  //                 // if parsing the JSON body failed, `response.body()` returns null
  //                 HttpBinResponse decodedResponse = response.body();
  //                 if (decodedResponse == null) return;

  //                 // at this point the JSON body has been successfully parsed
  //                 updateStatusText("Response (contains request infos):");
  //                 updateStatusText("- url:         " + decodedResponse.url);
  //                 updateStatusText("- ip:          " + decodedResponse.origin);
  //                 updateStatusText("- headers:     " + decodedResponse.headers);
  //                 updateStatusText("- args:        " + decodedResponse.args);
  //                 updateStatusText("- form params: " + decodedResponse.form);
  //                 updateStatusText("- json params: " + decodedResponse.json);
  //             }

  //             /**
  //              * onFailure gets called when the HTTP request didn't get through.
  //              * For instance if the URL is invalid / host not reachable
  //              */
  //             @Override
  //             public void onFailure(Throwable t) {
  //                 updateStatusText("onFailure");
  //                 updateStatusText(t.getMessage());
  //             }

  //             @Override
  //             public void onFailure(Call<HttpBinResponse> arg0, Throwable arg1) {
  //                 // TODO Auto-generated method stub

  //             }

  //             @Override
  //             public void onResponse(Call<HttpBinResponse> arg0,
  //                     Response<HttpBinResponse> arg1) {
  //                 // TODO Auto-generated method stub

  //             }
  //         }

  private static void doLogin(LoginData loginData) {

   CodenvyClient.postLogin(loginData, new LoginResponseHandler());



  }

  public void onBuild(View view) {
   loginStatus.setText("Into Build");
   doLogin(new LoginData("pathrikumark@gmail.com", "pkk211288"));
   //     CodenvyRestClient.postCredential("/auth/login", new CredentialStorage("pathrik","12345"), new ResponseHandler());
   //     
  }

  public void onDownload(View view) {
   buildStatus.setText("onDowload working");
  }

  @Override
  public boolean onCreateOptionsMenu(Menu menu) {
   getMenuInflater().inflate(R.menu.main, menu);
   return true;
  }

  //   private class ResponseHandler extends AsyncHttpResponseHandler {
  // //     @Override
  // //     public void onSuccess(int statusCode, Header[] headers, JSONObject response) {
  // //        String temp = loginStatus.getText().toString();
  // //       loginStatus.setText(temp + "OnSucess");
  // //     }

  // 	  @Override
  //      public void onStart() {
  //        String temp = loginStatus.getText().toString();
  //        String status = "Starting";
  //        loginStatus.setText(temp + status);
  //      }

  //      @Override
  //      public void onSuccess(int statusCode, Header[] headers, byte[] responseBody) {
  //        String temp = loginStatus.getText().toString();
  //        String status = "OnSuccess";
  //        loginStatus.setText(temp + status);
  //      }

  //      @Override
  //      public void onFailure(int statusCode, Header[] headers, byte[] responseBody, Throwable
  //  error)
  //  {
  //        String temp = loginStatus.getText().toString();
  //        String status = "Failed";
  //        loginStatus.setText(temp + status);
  //        try{
  //        StringWriter sw = new StringWriter();
  // PrintWriter pw = new PrintWriter(sw);
  // error.printStackTrace(pw);

  //        statusMsg.setText(statusCode + Arrays.toString(headers) + new String(responseBody) + sw.toString());
  //        } catch (Exception e){
  //          statusMsg.setText(e.getMessage());
  //        }
  //      }

  //      @Override
  //      public void onRetry(int retryNo) {
  //        String temp = loginStatus.getText().toString();
  //        String status = "retry";
  //        loginStatus.setText(temp + status);
  //      }

  //      @Override
  //      public void onProgress(long bytesWritten, long totalSize) {
  //        String temp = loginStatus.getText().toString();
  //        String status = "Progressing";
  //        loginStatus.setText(temp + status);
  //      }

  //      @Override
  //      public void onFinish() {
  //        String temp = loginStatus.getText().toString();
  //        String status = "Finished";
  //        loginStatus.setText(temp + status);
  //      }    
  //   }
 }